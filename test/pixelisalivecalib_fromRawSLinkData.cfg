process PIXELISALIVE = 
{

######################################################
#
#   By Freya Blekman
#
######################################################

######################################################
#  define the number of events to run on (-1 = all)
######################################################

   untracked PSet maxEvents = {untracked int32 input = -1}

#################################
# define any file from disk (prefix: "file:") castor (prefix "rfio:") or other framework supported locations in the fileNames vector:
# WARNING: Currently only supports the reading in of a SINGLE file. This will be fixed once the framework people fix the raw data sources classes.
#################################

    include "IORawData/SiPixelInputSources/data/PixelSLinkDataInputSource.cfi"
    replace PixelSLinkDataInputSource.fileNames = {"rfio:/castor/cern.ch/cms/store/TAC/PIXEL/BPIX/PSI/PixelAlive_414.dmp"}



######################################################
#  database information. Modify tags when appropriate
######################################################

   include "CondTools/SiPixel/data/SiPixelCalibConfiguration.cfi"
   replace sipixelcalib_essource.toGet = { 
	{ 
	    string record = "SiPixelCalibConfigurationRcd"
	    # change the tag appropriately. 
	    # This tag string controls which calibration information is used and for now should match the used datafile.
	    string tag = "PixelAlive_414"
	},
	{ # this is cabling information, it contains the cabling map
	    string record = "SiPixelFedCablingMapRcd"
	    string tag = "SiPixelFedCablingMap_v9"
	}
    }

    include "Geometry/TrackerSimData/data/trackerSimGeometryXML.cfi"
    include "Geometry/TrackerGeometryBuilder/data/trackerGeometry.cfi"
    include "Geometry/TrackerNumberingBuilder/data/trackerNumberingGeometry.cfi"

#############################################
# raw to digi
#############################################

    include "EventFilter/SiPixelRawToDigi/data/SiPixelRawToDigi.cfi"
    replace siPixelDigis.InputLabel = "source"

#############################################
# make sure the error collection is included...
#############################################
    replace siPixelDigis.IncludeErrors = true

#############################################
#   create calibdigis
#############################################

    include "CalibTracker/SiPixelGainCalibration/data/SiPixelCalibDigiProducer.cfi"
    replace siPixelCalibDigis.src = "siPixelDigis"

############################################################
# include DQM services
############################################################
 
service = DaqMonitorROOTBackEnd{}

######################################################
#  services
#  comment out when appropriate
######################################################

    module dumpinfo = EventContentAnalyzer {}

    #timing service
#    service = Timing {}

   # Message Logger
    service = MessageLogger {	
	#	untracked vstring destinations = {"mylog.log"}
	untracked vstring destinations = {"cout"}
#	untracked PSet gaincalibrationlog.txt = {untracked string threshold = "ERROR"}
	untracked PSet cout = { untracked string threshold = "ERROR"}
    }

######################################################
#  pixel alive analysis module
######################################################

    include "CalibTracker/SiPixelIsAliveCalibration/data/SiPixelIsAliveCalibration.cfi"
    replace siPixelIsAliveCalibration.DetSetVectorSiPixelCalibDigiTag=siPixelCalibDigis

######################################################
#  output
######################################################

   # Output module

    module out = PoolOutputModule
    { 		
   	untracked string fileName = "calibdigis.root"
#   	untracked string fileName = "/afs/cern.ch/cms/Tracker/Pixel/forward/calibdigis/GainCalibration_298_calibdigis.root"
	untracked vstring outputCommands = {
	    "drop *",
#	    "keep SiPixelRawDataErroredmDetSetVector_*_*_*",
	    "keep *_siPixelCalibDigis_*_*"
	}
    }

# path, here you define the order in which the modules are executed

    path p = {siPixelDigis, siPixelCalibDigis, siPixelIsAliveCalibration}

# and create the output. Removing 'dumpinfo' will make things much more quiet.

#    endpath e = { dumpinfo, out }
    endpath e = {out}

}
